(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{417:function(r,t,a){"use strict";a.r(t);var e=a(31),s=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"graphql-이란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql-이란"}},[r._v("#")]),r._v(" GraphQL 이란?")]),r._v(" "),a("p",[r._v("GraphQL은 SQL과 마찬가지로 "),a("strong",[r._v("쿼리 언어")]),r._v("이자 "),a("strong",[r._v("API를 위한 서버측 런타임")]),r._v("이다."),a("br"),r._v("\nSQL이 "),a("strong",[r._v("데이터베이스 시스템")]),r._v("에 저장된 데이터를 효율적으로 가져오는 것이 목적이라면,"),a("br"),r._v("\nGraphQL은 "),a("strong",[r._v("웹 클라이언트")]),r._v("가 데이터를 서버로 부터 효율적으로 가져오는 것이 목적이다.")]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://graphql.org/swapi-graphql",target:"_blank",rel:"noopener noreferrer"}},[r._v("GraphQL을 실행해볼 수 있는 사이트"),a("OutboundLink")],1)]),r._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/graphql/swapi-graphql/tree/master/doc/example_queries",target:"_blank",rel:"noopener noreferrer"}},[r._v("GraphQL Example Query"),a("OutboundLink")],1)]),r._v(" "),a("li",[a("a",{attrs:{href:"https://www.prisma.io/blog/top-5-reasons-to-use-graphql-b60cfa683511",target:"_blank",rel:"noopener noreferrer"}},[r._v("GraphQL을 사용하는 가장 큰 5가지 이유"),a("OutboundLink")],1)]),r._v(" "),a("li",[a("a",{attrs:{href:"https://www.howtographql.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("GraphQL 학습 사이트"),a("OutboundLink")],1)]),r._v(" "),a("li",[a("a",{attrs:{href:"https://graphql-kr.github.io",target:"_blank",rel:"noopener noreferrer"}},[r._v("한국어 번역 공식 소개 사이트"),a("OutboundLink")],1)]),r._v(" "),a("li",[a("a",{attrs:{href:"https://tech.kakao.com/2019/08/01/graphql-basic/",target:"_blank",rel:"noopener noreferrer"}},[r._v("카카오테크 GraphQL 설명"),a("OutboundLink")],1)])]),r._v(" "),a("h2",{attrs:{id:"rest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest"}},[r._v("#")]),r._v(" REST")]),r._v(" "),a("h2",{attrs:{id:"graphql의-특징"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql의-특징"}},[r._v("#")]),r._v(" GraphQL의 특징")]),r._v(" "),a("p",[r._v("필요한 데이터를 정확하게 특정하여 API에 요청하는 "),a("strong",[r._v("선언적인 데이터 불러오기가 가능")]),r._v("하다."),a("br"),r._v("\n(REST와 달리 단 하나의 엔드포인트만 노출시키고, 클라이언트가 요청한 데이터들만 정확하게 반환한다.)")]),r._v(" "),a("ul",[a("li",[a("strong",[r._v("SQL")]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("SELECT")]),r._v(" plot_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" species_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[r._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),r._v("weight "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("1000.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("FROM")]),r._v(" surveys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(";")]),r._v("\n")])])])]),r._v(" "),a("li",[a("strong",[r._v("GraphQL")]),r._v(" "),a("img",{attrs:{src:"/images/TIL/DB-GraphQL/graphql-1-1.png",alt:"image"}})])]),r._v(" "),a("p",[r._v("사실 이렇게만 보면 굳이 번거롭게 GraphQL을 사용해야하나 싶었다."),a("br"),r._v("\n그냥 back-end단에서 SQL로 요청하면 되는데, front-end단에서 GraphQL -> GraphQL Server로 요청을 해야하니 오히려 번거롭게 느껴졌다."),a("br"),r._v("\n하지만 이렇게 함으로써 보다 효율적으로 데이터를 가져올 수 있다는 장점이 있다.")]),r._v(" "),a("h2",{attrs:{id:"graphql의-필요성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql의-필요성"}},[r._v("#")]),r._v(" GraphQL의 필요성")]),r._v(" "),a("p",[a("strong",[r._v("1. 모바일 사용 증가로 인해 이전보다 효율적인 데이터 로드 필요")])]),r._v(" "),a("ul",[a("li",[r._v("네트워크를 통해 전송해야 하는 데이터의 양을 최소화하여 이러한 조건에서 작동하는 애플리케이션을 개선해야함")]),r._v(" "),a("li",[r._v("REST API는 사용하지 않는 데이터까지 가져옴")])]),r._v(" "),a("p",[a("strong",[r._v("2. 너무나 다양해진 프론트엔드 프레임워크 및 플랫폼 대응")])]),r._v(" "),a("ul",[a("li",[r._v("다양한 프레임워크 및 플랫폼 환경으로 인해 모든 요구사항에 맞는 하나의 API를 구축하고 관리하기 어려워짐")]),r._v(" "),a("li",[r._v("요구사항이 변경될 때 API를 수정이 잦아짐")])]),r._v(" "),a("p",[a("strong",[r._v("3. 빠른 개발 및 신속한 기능 개발에 대한 기대")])]),r._v(" "),a("ul",[a("li",[r._v("클라이언트 측의 특정 요구사항 및 설계 변경을 고려하여 서버에서 데이터를 노출하는 방식을 수정해야 하는 경우가 많다.")]),r._v(" "),a("li",[r._v("이는 빠른 개발 관행과 제품 반복을 방해한다.")])]),r._v(" "),a("h2",{attrs:{id:"rest의-단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest의-단점"}},[r._v("#")]),r._v(" REST의 단점")]),r._v(" "),a("p",[r._v("GraphQL의 장점을 보기 전에 REST API의 단점을 짚고 넘어가겠다."),a("br"),r._v(" "),a("br")]),r._v(" "),a("p",[a("strong",[r._v("1. 오버패칭 (Overfetching)")]),r._v(" - 필요하지 않은 데이터까지 가져옴, 원하는 데이터만 얻기 위해 정제해야함")]),r._v(" "),a("p",[a("strong",[r._v("2. 언더패칭 (Underfetching)")]),r._v(" - 다른 종류의 데이터를 가져올 때 엔드포인트를 하나 더 만들어야함"),a("br"),r._v("\n(서버에 요청을 여러번 하게 됨)"),a("br"),r._v("\nex) 사람에 대한 정보 뿐 아니라 그 사람의 최근 게시글 5개를 추가로 가져오고 싶을 때")]),r._v(" "),a("p",[a("strong",[r._v("3. 엔드포인트 관리 문제")]),r._v(" - 엔드포인트 관리를 위해 프론트단, 백단 개발팀끼리 회의하는 등 귀찮아짐")]),r._v(" "),a("h3",{attrs:{id:"요약하자면-관리해야-할-endpoint의-증가로-인하여-발생하는-문제점들이다"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#요약하자면-관리해야-할-endpoint의-증가로-인하여-발생하는-문제점들이다"}},[r._v("#")]),r._v(" 요약하자면, 관리해야 할 EndPoint의 증가로 인하여 발생하는 문제점들이다.")]),r._v(" "),a("br"),r._v("\n이제 REST의 단점을 보았으니 GraphQL의 장점을 살펴보자.\n"),a("h2",{attrs:{id:"graphql-장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql-장점"}},[r._v("#")]),r._v(" GraphQL 장점")]),r._v(" "),a("p",[a("strong",[r._v("1. 단 하나의 EndPoint만 사용하여 구현 가능하다.")]),r._v(" (유지보수가 용이해진다)\n"),a("img",{attrs:{src:"/images/TIL/DB-GraphQL/graphql-1-2.png",alt:"https://devopedia.org/graphql"}}),a("br"),r._v(" "),a("br"),r._v(" "),a("strong",[r._v("2. 한번의 요청으로 원하는 데이터를 정확히 가져올 수 있음")]),r._v(" (Overfetching, Underfetching 해결)"),a("br"),r._v(" "),a("br"),r._v(" "),a("strong",[r._v("3. Redux 대신 Apollo를 사용함")])]),r._v(" "),a("h2",{attrs:{id:"graphql-단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql-단점"}},[r._v("#")]),r._v(" GraphQL 단점")]),r._v(" "),a("p",[a("strong",[r._v("1. 하나의 엔드포인트만 사용하기 때문에, HTTP에서 제공하는 캐싱 전략을 그대로 사용할 수 없다.")]),a("br"),r._v("\n(영속쿼리, 아폴로엔진 등으로 캐싱에 대한 문제를 해결할 수 있다)")]),r._v(" "),a("p",[a("strong",[r._v("2. 요청 필터링의 어려움")]),a("br"),r._v("\n(GraphQL의 다양한 요청형태에서 잘못된 요청을 필터링하기가 까다롭다)")]),r._v(" "),a("h2",{attrs:{id:"graphql-vs-rest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql-vs-rest"}},[r._v("#")]),r._v(" GraphQL vs REST")]),r._v(" "),a("p",[a("img",{attrs:{src:"/images/TIL/DB-GraphQL/graphql-1-3.png",alt:"graphql-1-3"}})]),r._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[r._v("#")]),r._v(" Reference")]),r._v(" "),a("p",[a("a",{attrs:{href:"https://tech.kakao.com/2019/08/01/graphql-basic/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://tech.kakao.com/2019/08/01/graphql-basic/"),a("OutboundLink")],1),a("br"),r._v(" "),a("a",{attrs:{href:"https://graphql-kr.github.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("graphql-kr.github.io"),a("OutboundLink")],1),a("br"),r._v(" "),a("a",{attrs:{href:"https://owin2828.github.io/devlog/2020/11/12/GraphQL-1.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://owin2828.github.io/devlog/2020/11/12/GraphQL-1.html"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);