(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{425:function(t,e,_){"use strict";_.r(e);var v=_(31),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_1-1-소프트웨어-개발방법론"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-소프트웨어-개발방법론"}},[t._v("#")]),t._v(" 1-1. 소프트웨어 개발방법론")]),t._v(" "),_("h2",{attrs:{id:"_1-소프트웨어-생명주기-모델"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-소프트웨어-생명주기-모델"}},[t._v("#")]),t._v(" (1) 소프트웨어 생명주기 모델")]),t._v(" "),_("h3",{attrs:{id:"_1-소프트웨어-생명주기-sdlc-모델-개념"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-소프트웨어-생명주기-sdlc-모델-개념"}},[t._v("#")]),t._v(" 1. 소프트웨어 생명주기(SDLC) 모델 개념")]),t._v(" "),_("ul",[_("li",[t._v("시스템의 전체적인 공정에 대한 작업 프로세스를 모델화 한 것")])]),t._v(" "),_("h3",{attrs:{id:"_2-소프트웨어-생명주기-모델-프로세스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-소프트웨어-생명주기-모델-프로세스"}},[t._v("#")]),t._v(" 2. 소프트웨어 생명주기 모델 프로세스")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수")])])]),t._v(" "),_("ol",[_("li",[t._v("요구사항 분석 (기능 / 비기능 요구사항)")]),t._v(" "),_("li",[t._v("설계 (시스템 구조 / 프로그램 / 사용자 인터페이스 설계)")]),t._v(" "),_("li",[t._v("구현 (인터페이스 / 자료구조 개발, 오류 처리)")]),t._v(" "),_("li",[t._v("테스트 (단위 / 통합 / 시스템 / 인수 테스트) "),_("strong",[t._v("단통시인")])]),t._v(" "),_("li",[t._v("유지보수 (예방, 완전, 교정, 적응 유지보수)")])]),t._v(" "),_("h3",{attrs:{id:"_3-소프트웨어-생명주기-모델-종류-폭프나반"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-소프트웨어-생명주기-모델-종류-폭프나반"}},[t._v("#")]),t._v(" 3. 소프트웨어 생명주기 모델 종류 (폭프나반)")]),t._v(" "),_("ul",[_("li",[t._v("폭포수 모델 (타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수)")]),t._v(" "),_("li",[t._v("프로토타이핑 모델")]),t._v(" "),_("li",[t._v("나선형 모델 (계획 및 정의 -> 위험 분석 -> 개발 -> 고객 평가) "),_("strong",[t._v("(계위개고)")])]),t._v(" "),_("li",[t._v("반복적 모델")])]),t._v(" "),_("br"),t._v(" "),_("h2",{attrs:{id:"_2-소프트웨어-개발-방법론"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-소프트웨어-개발-방법론"}},[t._v("#")]),t._v(" (2) 소프트웨어 개발 방법론")]),t._v(" "),_("h3",{attrs:{id:"_1-소프트웨어-개발방법론-개념"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-소프트웨어-개발방법론-개념"}},[t._v("#")]),t._v(" 1. 소프트웨어 개발방법론 개념")]),t._v(" "),_("ul",[_("li",[t._v("소프트웨어 개발 전 과정에 지속적으로 적용할 수 있는 방법")]),t._v(" "),_("li",[t._v("개발의 시작부터 시스템을 사용하지 않는 과정까지 전 과정을 형상화한 방법론")])]),t._v(" "),_("h3",{attrs:{id:"_2-소프트웨어-개발-방법론-종류"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-소프트웨어-개발-방법론-종류"}},[t._v("#")]),t._v(" 2. 소프트웨어 개발 방법론 종류")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("구조적 방법론")])]),t._v(" "),_("ul",[_("li",[t._v("전체 시스템을 기능에 따라 나누어 개발, 이를 통합하는 분할 및 정복 접근 방식")]),t._v(" "),_("li",[t._v("프로세스 중심의 하향식 방법론")]),t._v(" "),_("li",[t._v("구조적 프로그래밍 표현을 위해 "),_("strong",[t._v("나씨-슈나이더만(Nassi-Shneiderman)")]),t._v(" 차트 사용\n"),_("blockquote",[_("p",[t._v("나씨-슈나이더만 : 논리의 기술에 중점을 둔 도형식 표현 방법")])])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("정보공학 방법론")]),t._v(" : 관리 절차와 작업 기법을 체계화한 방법론, 주로 대형 프로젝트에서 쓰임")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("객체지향 방법론")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("컴포넌트 기반 방법론")]),t._v(" : "),_("strong",[t._v("컴포넌트")]),t._v("를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("애자일 방법론")]),t._v(" : 사람이 중심이 되어 쇼율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발방법론")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("제품 계열 방법론")]),t._v(" : 공통된 기능을 정의하여 개발하는 방법론")])])]),t._v(" "),_("h3",{attrs:{id:"_3-애자일-agile"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-애자일-agile"}},[t._v("#")]),t._v(" 3. 애자일 (Agile)")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("XP, 린(Lean), 스크럼(SCRUM) 등이 있다.")])]),t._v(" "),_("li",[_("strong",[t._v("XP의 5가지 가치 : 용기, 단순성, 의사소통, 피드백, 존중")])]),t._v(" "),_("li",[_("strong",[t._v("XP의 12가지 기본 원리")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("기본 원리")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("설명")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("짝 프로그래밍")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("개발자 둘이서 짝으로 코딩하는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("공동 코드 소유")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("시스템에 있는 코드는 언제라도 수정 가능하다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("지속적인 통합")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("매일 여러 번씩 소프트웨어를 통합하고 빌드해야 한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("계획 세우기")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("고객이 요구하는 비즈니스 가치를 정의하고, 어떤 부분에서 지연될 수 있는지 알려주어야 한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("작은 릴리즈")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("작은 시스템을 먼저 만들고, 짧은 단위로 업데이트한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("메타포어")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("공통적인 이름 체계와 시스템 서술서를 통해 고객과 개발자간의 의사소통을 원활하게 한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("간단한 디자인")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("요구사항에 적합한 가장 단순한 시스템을 설계한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("테스트 기반 개발(TDD)")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("작성해야 하는 프로그램에 대한 테스트를 먼저 수행하고, 테스트를 통과할 수 있도록 코드를 작성한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("리팩토링")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 시스템을 재구성한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("40시간 작업")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("일주일에 40시간 이상을 일하지 말아야 한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("고객 상주")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("고객을 프로젝트에 풀타임으로 상주시켜야 한다는 원리")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("코드 표준")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("코딩 표준을 정의해야 한다는 원리")])])])])]),t._v(" "),_("li",[_("strong",[t._v("스크럼(SCRUM) : 매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 방법론")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("주요 개념")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("설명")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("백로그")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("제품과 프로젝트에 대한 요구사항")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("스프린트")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("2~4주의 짧은 개발 기간을 반복 수행")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("스크럼 미팅")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("데일리미팅이라고 하며 매일 15분정도 To-Do List 계획 수립")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("스크럼 마스터")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("프로젝트 리더")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("스프린트 회고")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("스프린트 주기를 되돌아보며 개선점 등을 확인 및 기록")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("번 다운 차트")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("남아있는 백로그 대비 시간을 표현한 차트")])])])])]),t._v(" "),_("li",[_("strong",[t._v("린(LEAN) : 비 요소를 제거하여 품질을 향상시킨 방법론 (도요타의 린 시스템 품질기법을 적용)")]),t._v(" "),_("ul",[_("li",[t._v("린의 7가지 원칙 :낭비제거, 품질내재화, 지식 창출, 늦은 확정, 빠른 인도, 사람 존중, 전체 최적화")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);